<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.dao.SalaryMapper">
    <resultMap id="BaseResultMap" type="com.ssm.entity.Salary">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="uid" jdbcType="INTEGER" property="uid"/>
        <result column="performance" jdbcType="DOUBLE" property="performance"/>
        <result column="factSalary" jdbcType="DOUBLE" property="factsalary"/>
        <result column="deductSituation" jdbcType="VARCHAR" property="deductsituation"/>
        <result column="deductSalary" jdbcType="DOUBLE" property="deductsalary"/>
        <result column="mid" jdbcType="INTEGER" property="mid"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, uid, performance, factSalary, deductSituation, deductSalary, mid
    </sql>
    <select id="selectByExample" parameterType="com.ssm.entity.SalaryExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from salary
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from salary
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from salary
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.ssm.entity.SalaryExample">
        delete from salary
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.ssm.entity.Salary">
        insert into salary (id, uid, performance,
                            factSalary, deductSituation, deductSalary,
                            mid)
        values (#{id,jdbcType=INTEGER}, #{uid,jdbcType=INTEGER}, #{performance,jdbcType=DOUBLE},
                #{factsalary,jdbcType=DOUBLE}, #{deductsituation,jdbcType=VARCHAR}, #{deductsalary,jdbcType=DOUBLE},
                #{mid,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" parameterType="com.ssm.entity.Salary">
        insert into salary
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="uid != null">
                uid,
            </if>
            <if test="performance != null">
                performance,
            </if>
            <if test="factsalary != null">
                factSalary,
            </if>
            <if test="deductsituation != null">
                deductSituation,
            </if>
            <if test="deductsalary != null">
                deductSalary,
            </if>
            <if test="mid != null">
                mid,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="uid != null">
                #{uid,jdbcType=INTEGER},
            </if>
            <if test="performance != null">
                #{performance,jdbcType=DOUBLE},
            </if>
            <if test="factsalary != null">
                #{factsalary,jdbcType=DOUBLE},
            </if>
            <if test="deductsituation != null">
                #{deductsituation,jdbcType=VARCHAR},
            </if>
            <if test="deductsalary != null">
                #{deductsalary,jdbcType=DOUBLE},
            </if>
            <if test="mid != null">
                #{mid,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.ssm.entity.SalaryExample" resultType="java.lang.Long">
        select count(*) from salary
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update salary
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.uid != null">
                uid = #{record.uid,jdbcType=INTEGER},
            </if>
            <if test="record.performance != null">
                performance = #{record.performance,jdbcType=DOUBLE},
            </if>
            <if test="record.factsalary != null">
                factSalary = #{record.factsalary,jdbcType=DOUBLE},
            </if>
            <if test="record.deductsituation != null">
                deductSituation = #{record.deductsituation,jdbcType=VARCHAR},
            </if>
            <if test="record.deductsalary != null">
                deductSalary = #{record.deductsalary,jdbcType=DOUBLE},
            </if>
            <if test="record.mid != null">
                mid = #{record.mid,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update salary
        set id = #{record.id,jdbcType=INTEGER},
        uid = #{record.uid,jdbcType=INTEGER},
        performance = #{record.performance,jdbcType=DOUBLE},
        factSalary = #{record.factsalary,jdbcType=DOUBLE},
        deductSituation = #{record.deductsituation,jdbcType=VARCHAR},
        deductSalary = #{record.deductsalary,jdbcType=DOUBLE},
        mid = #{record.mid,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.ssm.entity.Salary">
        update salary
        <set>
            <if test="uid != null">
                uid = #{uid,jdbcType=INTEGER},
            </if>
            <if test="performance != null">
                performance = #{performance,jdbcType=DOUBLE},
            </if>
            <if test="factsalary != null">
                factSalary = #{factsalary,jdbcType=DOUBLE},
            </if>
            <if test="deductsituation != null">
                deductSituation = #{deductsituation,jdbcType=VARCHAR},
            </if>
            <if test="deductsalary != null">
                deductSalary = #{deductsalary,jdbcType=DOUBLE},
            </if>
            <if test="mid != null">
                mid = #{mid,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.ssm.entity.Salary">
        update salary
        set uid             = #{uid,jdbcType=INTEGER},
            performance     = #{performance,jdbcType=DOUBLE},
            factSalary      = #{factsalary,jdbcType=DOUBLE},
            deductSituation = #{deductsituation,jdbcType=VARCHAR},
            deductSalary    = #{deductsalary,jdbcType=DOUBLE},
            mid             = #{mid,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <resultMap id="nn" type="com.ssm.entity.Salary">
        <id property="id" column="id"/>
        <result column="uid" property="uid"/>
        <result column="performance" property="performance"/>
        <result column="factsalary" property="factsalary"/>
        <result column="deductsituation" property="deductsituation"/>
        <result column="deductsalary" property="deductsalary"/>
        <result column="mid" property="mid"/>
        <collection property="user" ofType="com.ssm.entity.User"
                    select="com.ssm.dao.SalaryMapper.getUser" column="uid">
        </collection>
        <collection property="month" ofType="com.ssm.entity.Month"
                    select="com.ssm.dao.SalaryMapper.getMonth" column="mid">
        </collection>
    </resultMap>
    <select id="getUserMonthSingle" resultMap="nn">
        select a.id as id,a.uid as uid,a.performance as performance,a.factsalary as factsalary ,a.deductsituation as deductsituation ,a.deductsalary as deductsalary
        ,a.mid as mid
        from salary as a
        where uid = #{uid} and mid = #{mid}
    </select>
    <select id="getUser" resultType="com.ssm.entity.User">
        select *
        from user
        where id = #{id}
    </select>
    <select id="getMonth" resultType="com.ssm.entity.Month">
        select *
        from month
        where id = #{id}
    </select>

    <resultMap id="gg" type="com.ssm.entity.Salary">
        <id property="id" column="id"/>
        <result column="uid" property="uid"/>
        <result column="performance" property="performance"/>
        <result column="factsalary" property="factsalary"/>
        <result column="deductsituation" property="deductsituation"/>
        <result column="deductsalary" property="deductsalary"/>
        <result column="mid" property="mid"/>
        <collection property="user" ofType="com.ssm.entity.User"
                    select="com.ssm.dao.SalaryMapper.getUser" column="uid">
        </collection>
        <collection property="month" ofType="com.ssm.entity.Month"
                    select="com.ssm.dao.SalaryMapper.getMonth" column="mid">
        </collection>
    </resultMap>
    <select id="getAllSalary" resultMap="gg">
        select a.id as id,a.uid as uid,a.performance as performance,a.factsalary as factsalary ,a.deductsituation as deductsituation ,a.deductsalary as deductsalary
             ,a.mid as mid
        from salary as a
    </select>

</mapper>