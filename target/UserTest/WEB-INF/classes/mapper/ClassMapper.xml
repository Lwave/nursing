<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.dao.ClassMapper">
    <resultMap id="BaseResultMap" type="com.ssm.entity.Class">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="className" jdbcType="VARCHAR" property="classname"/>
        <result column="classInfo" jdbcType="VARCHAR" property="classinfo"/>
        <result column="classHour" jdbcType="VARCHAR" property="classhour"/>
        <result column="uid" jdbcType="INTEGER" property="uid"/>
        <result column="position" jdbcType="VARCHAR" property="position"/>
        <result column="situation" jdbcType="VARCHAR" property="situation"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, className, classInfo, classHour, uid, position, situation
    </sql>
    <select id="selectByExample" parameterType="com.ssm.entity.ClassExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from class
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from class
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from class
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.ssm.entity.ClassExample">
        delete from class
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.ssm.entity.Class">
        insert into class (id, className, classInfo,
                           classHour, uid, position,
                           situation)
        values (#{id,jdbcType=INTEGER}, #{classname,jdbcType=VARCHAR}, #{classinfo,jdbcType=VARCHAR},
                #{classhour,jdbcType=VARCHAR}, #{uid,jdbcType=INTEGER}, #{position,jdbcType=VARCHAR},
                #{situation,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.ssm.entity.Class">
        insert into class
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="classname != null">
                className,
            </if>
            <if test="classinfo != null">
                classInfo,
            </if>
            <if test="classhour != null">
                classHour,
            </if>
            <if test="uid != null">
                uid,
            </if>
            <if test="position != null">
                position,
            </if>
            <if test="situation != null">
                situation,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="classname != null">
                #{classname,jdbcType=VARCHAR},
            </if>
            <if test="classinfo != null">
                #{classinfo,jdbcType=VARCHAR},
            </if>
            <if test="classhour != null">
                #{classhour,jdbcType=VARCHAR},
            </if>
            <if test="uid != null">
                #{uid,jdbcType=INTEGER},
            </if>
            <if test="position != null">
                #{position,jdbcType=VARCHAR},
            </if>
            <if test="situation != null">
                #{situation,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.ssm.entity.ClassExample" resultType="java.lang.Long">
        select count(*) from class
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update class
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.classname != null">
                className = #{record.classname,jdbcType=VARCHAR},
            </if>
            <if test="record.classinfo != null">
                classInfo = #{record.classinfo,jdbcType=VARCHAR},
            </if>
            <if test="record.classhour != null">
                classHour = #{record.classhour,jdbcType=VARCHAR},
            </if>
            <if test="record.uid != null">
                uid = #{record.uid,jdbcType=INTEGER},
            </if>
            <if test="record.position != null">
                position = #{record.position,jdbcType=VARCHAR},
            </if>
            <if test="record.situation != null">
                situation = #{record.situation,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update class
        set id = #{record.id,jdbcType=INTEGER},
        className = #{record.classname,jdbcType=VARCHAR},
        classInfo = #{record.classinfo,jdbcType=VARCHAR},
        classHour = #{record.classhour,jdbcType=VARCHAR},
        uid = #{record.uid,jdbcType=INTEGER},
        position = #{record.position,jdbcType=VARCHAR},
        situation = #{record.situation,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.ssm.entity.Class">
        update class
        <set>
            <if test="classname != null">
                className = #{classname,jdbcType=VARCHAR},
            </if>
            <if test="classinfo != null">
                classInfo = #{classinfo,jdbcType=VARCHAR},
            </if>
            <if test="classhour != null">
                classHour = #{classhour,jdbcType=VARCHAR},
            </if>
            <if test="uid != null">
                uid = #{uid,jdbcType=INTEGER},
            </if>
            <if test="position != null">
                position = #{position,jdbcType=VARCHAR},
            </if>
            <if test="situation != null">
                situation = #{situation,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.ssm.entity.Class">
        update class
        set className = #{classname,jdbcType=VARCHAR},
            classInfo = #{classinfo,jdbcType=VARCHAR},
            classHour = #{classhour,jdbcType=VARCHAR},
            uid       = #{uid,jdbcType=INTEGER},
            position  = #{position,jdbcType=VARCHAR},
            situation = #{situation,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <resultMap id="ss" type="com.ssm.entity.Class">
        <id property="id" column="id"/>
        <result column="classname" property="classname"/>
        <result column="classinfo" property="classinfo"/>
        <result column="classhour" property="classhour"/>
        <result column="position" property="position"/>
        <result column="uid" property="uid"/>
        <result column="situation" property="situation"/>
        <collection property="head" ofType="com.ssm.entity.User" select="com.ssm.dao.ClassMapper.getEmployeeUsername1"
                    column="uid">
        </collection>
        <collection property="respname" ofType="com.ssm.entity.User"
                    select="com.ssm.dao.ClassMapper.getEmployeeRespUsername" column="uid">
        </collection>
    </resultMap>
    <select id="getEmployeeService" resultMap="ss">
        select *
        from class
    </select>

    <select id="getEmployeeUsername1" resultType="java.lang.String">
        select u.username as head
        from user u
        where u.id = #{id}
    </select>

    <select id="getEmployeeUsername" resultType="java.lang.String">
        select u.username as head
        from user u
        where u.role = 6
           or u.role = 7
            and u.id = #{id}
    </select>

    <select id="getEmployeeUsername2" resultType="java.lang.String">
        select u.username as head
        from user u
        where u.id = #{id}
    </select>

    <select id="getEmployeeRespUsername" resultType="java.lang.String">
        select u2.username as respname
        from user u1,
            user u2
        where u1.uresp = u2.id
            and u1.id = #{id}
    </select>


    <select id="getUresp" resultType="java.lang.Integer">
        select c.uresp as uresp
        from user c
        where c.id = #{id}
    </select>

    <resultMap id="ff" type="com.ssm.entity.Class">
        <id property="id" column="id"/>
        <result column="classname" property="classname"/>
        <result column="classinfo" property="classinfo"/>
        <result column="classhour" property="classhour"/>
        <result column="position" property="position"/>
        <result column="uid" property="uid"/>
        <result column="situation" property="situation"/>
        <!--<collection property="head" ofType="com.ssm.entity.User" select="com.ssm.dao.ClassMapper.getEmployeeUsername"
                    column="uid">
        </collection>-->
        <collection property="respname" ofType="com.ssm.entity.User"
                    select="com.ssm.dao.ClassMapper.getEmployeeRespUsername" column="uid">
        </collection>
        <collection property="uresp" ofType="com.ssm.entity.User"
                    select="com.ssm.dao.ClassMapper.getUresp" column="uid">
        </collection>
    </resultMap>
    <select id="getEmployeeEdit" resultMap="ff">
        select *
        from class
        where id = #{id}
    </select>

    <resultMap id="gg" type="com.ssm.entity.Class">
        <id property="id" column="id"/>
        <result column="classname" property="classname"/>
        <result column="classinfo" property="classinfo"/>
        <result column="classhour" property="classhour"/>
        <result column="position" property="position"/>
        <result column="uid" property="uid"/>
        <result column="situation" property="situation"/>
        <collection property="head" ofType="com.ssm.entity.User" select="com.ssm.dao.ClassMapper.getEmployeeUsername2"
                    column="uid">
        </collection>
        <collection property="respname" ofType="com.ssm.entity.User"
                    select="com.ssm.dao.ClassMapper.getEmployeeRespUsername" column="uid">
        </collection>
        <collection property="uresp" ofType="com.ssm.entity.User"
                    select="com.ssm.dao.ClassMapper.getUresp" column="uid">
        </collection>
    </resultMap>
    <select id="getEmployeeSingle" resultMap="gg">
        select *
        from class
        where id = #{id}
    </select>

    <select id="getClass1" resultType="java.lang.Integer">
        select id from class
        where  uid = #{id}
    </select>

</mapper>